version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gde-postgres
    environment:
      POSTGRES_DB: gde_db
      POSTGRES_USER: gde_user
      POSTGRES_PASSWORD: gde_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - gde-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gde_user -d gde_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: gde-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gde-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: gde-backend
    environment:
      # Database
      DATABASE_URL: postgresql://gde_user:gde_password@postgres:5432/gde_db
      
      # Security
      SECRET_KEY: your-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Application
      APP_NAME: GDE Backend API
      APP_VERSION: 1.0.0
      DEBUG: "True"
      ENVIRONMENT: development
      
      # CORS
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:3001"]'
      ALLOWED_METHODS: '["GET", "POST", "PUT", "DELETE", "PATCH"]'
      ALLOWED_HEADERS: '["*"]'
      
      # File Upload
      UPLOAD_DIR: uploads
      MAX_FILE_SIZE: 10485760
      ALLOWED_FILE_TYPES: '["csv", "xlsx", "xls", "json"]'
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      
      # Cache
      REDIS_URL: redis://redis:6379/0
      CACHE_TTL: 300
    volumes:
      - .:/app
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "8000:8000"
    networks:
      - gde-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PgAdmin para administraci√≥n de base de datos (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gde-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gde-system.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - gde-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  gde-network:
    driver: bridge
