version: '3.8'

services:
  # Base de datos PostgreSQL para producción
  postgres:
    image: postgres:15-alpine
    container_name: gde-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gde_db}
      POSTGRES_USER: ${POSTGRES_USER:-gde_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gde-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gde_user} -d ${POSTGRES_DB:-gde_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: gde-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - gde-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API para producción
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gde-backend-prod
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-gde_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-gde_db}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # Application
      APP_NAME: ${APP_NAME:-GDE Backend API}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: ${DEBUG:-False}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      ALLOWED_METHODS: ${ALLOWED_METHODS:-["GET", "POST", "PUT", "DELETE", "PATCH"]}
      ALLOWED_HEADERS: ${ALLOWED_HEADERS:-["*"]}
      
      # File Upload
      UPLOAD_DIR: ${UPLOAD_DIR:-uploads}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-["csv", "xlsx", "xls", "json"]}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Cache
      REDIS_URL: redis://redis:6379/0
      CACHE_TTL: ${CACHE_TTL:-300}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - gde-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: gde-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - gde-network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  gde-network:
    driver: bridge
