version: '3.8'

services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  db:
    image: postgres:15-alpine
    container_name: gde-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gde_db}
      POSTGRES_USER: ${POSTGRES_USER:-gde_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gde_secure_password_2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./base_datos.md:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gde_user} -d ${POSTGRES_DB:-gde_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ==========================================
  # Redis Cache (Optional but recommended)
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: gde-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Backend API Service (FastAPI)
  # ==========================================
  backend:
    build:
      context: ./gde-backend
      dockerfile: Dockerfile
    container_name: gde-backend
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-gde_user}:${POSTGRES_PASSWORD:-gde_secure_password_2025}@db:5432/${POSTGRES_DB:-gde_db}
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./gde-backend/uploads:/app/uploads
      - ./gde-backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================
  # Frontend Service (Next.js)
  # ==========================================
  frontend:
    build:
      context: ./gde-frontend/gde-frontend
      dockerfile: Dockerfile.dev
    container_name: gde-frontend
    env_file:
      - .env.docker
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./gde-frontend/gde-frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================
  # Nginx Reverse Proxy
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: gde-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ==========================================
  # PgAdmin (Optional - Database Management)
  # ==========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gde-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@gde-system.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - gde-network
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  gde-network:
    driver: bridge

