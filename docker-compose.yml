version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: gde-backend/Dockerfile
    container_name: gde-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=True
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./gde-backend/uploads:/app/uploads
      - ./gde-backend/logs:/app/logs
    depends_on:
      - db
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: gde-frontend/Dockerfile
    container_name: gde-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_KEY}
      - NEXT_PUBLIC_APP_NAME=GDE System
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NEXT_PUBLIC_ENVIRONMENT=development
    depends_on:
      - backend
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Optional - if you want local DB instead of Supabase)
  db:
    image: postgres:15-alpine
    container_name: gde-db
    environment:
      - POSTGRES_DB=gde_db
      - POSTGRES_USER=gde_user
      - POSTGRES_PASSWORD=gde_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./gde-backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gde_user -d gde_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: gde-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gde-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: gde-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - gde-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  gde-network:
    driver: bridge

